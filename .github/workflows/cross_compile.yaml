name: Cross Compile

on:
  push:
    branches:
      - release
    tags: ["*"]
  # pull_request:
  #   branches:
  #     - main
  #     - master

jobs:
  cross-compile:
    name: Build for ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu # Linux 64-bit
          - aarch64-unknown-linux-gnu # Linux ARM64
          - arm-unknown-linux-gnueabihf # Linux ARMv7 (Raspberry Pi)
          - x86_64-pc-windows-msvc # Windows 64-bit
          - x86_64-apple-darwin # macOS (nécessite un runner macOS)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install ARMv7 cross-compiler (arm-linux-gnueabihf)
        # run if target is arm-unknown-linux-gnueabihf
        if: matrix.target == 'arm-unknown-linux-gnueabihf'
        run: |
          sudo apt-get update
          # `gcc-arm-linux-gnueabihf` fournit le compilateur spécifique
          # Ou `crossbuild-essential-armhf` pour un ensemble plus complet d'outils
          sudo apt-get install -y gcc-arm-linux-gnueabihf

      - name: Install AArch64 cross-compiler (aarch64-linux-gnu)
        # run if target is aarch64-unknown-linux-gnu
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          # `gcc-aarch64-linux-gnu` fournit le compilateur spécifique
          # Ou `crossbuild-essential-arm64` pour un ensemble plus complet d'outils
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build release binary for ${{ matrix.target }}
        run: cargo build --release --target ${{ matrix.target }}

      # Optionnel : to archive binaries
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ github.event.repository.name }} # adapt path/name
          # For Windows, add .exe:
          # path: target/${{ matrix.target }}/release/${{ github.event.repository.name }}${{ startsWith(matrix.target, 'x86_64-pc-windows') && '.exe' || '' }}

# https://docs.github.com/en/actions/how-tos/use-cases-and-examples/building-and-testing/building-and-testing-rust
# https://rakhim.exotext.com/how-to-build-and-publish-multi-platform-rust-binaries
# https://www.qovery.com/blog/how-to-make-rust-multi-arch-release-easy/